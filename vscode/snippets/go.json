{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Loop over map": {
		"description": "Loop over map with range",
		"prefix": "forRangeMap",
		"body": [
			"for ${1:key}, ${2:value} := range $3 {",
			"\t$0",
			"}"
		]
	},
	"Loop with range": {
		"description": "Loop over array with range",
		"prefix": "forRangeArray",
		"body": [
			"for ${1:index}, ${2:value} := range $3 {",
			"\t$0",
			"}"
		]
	},
	"Random source": {
		"description": "Securely generate a random seed that is not concurrency safe",
		"prefix": "randomSource",
		"body": [
			"var seed int64",
			"if err := binary.Read(crand.Reader, binary.LittleEndian, &seed); err != nil {",
			"\tpanic(err)",
			"}",
			"rnd := rand.New(rand.NewSource(seed))"
		]
	},
	"JSON HTTP request": {
		"description": "Basic JSON HTTP request with Client",
		"prefix": "jsonHTTPRequest",
		"body": [
			"client := &http.Client{",
			"\tTimeout: time.Second * 60,",
			"}",
			"",
			"var reqBody map[string]string",
			"b := new(bytes.Buffer)",
			"json.NewEncoder(b).Encode(reqBody)",
			"",
			"req, err := http.NewRequest(${1:method}, ${2:url}, b)",
			"if err != nil {",
			"\tpanic(err)",
			"}",
			"",
			"req.Header.Add(\"key\", \"value\")",
			"",
			"q := req.URL.Query()",
			"q.Add(\"key\", \"value\")",
			"req.URL.RawQuery = q.Encode()",
			"",
			"resp, err := client.Do(req)",
			"if err != nil {",
			"\tpanic(err)",
			"}",
			"defer resp.Body.Close()",
			"",
			"var body map[string]json.RawMessage",
			"if err := json.NewDecoder(resp.Body).Decode(&body); err != nil {",
			"\tpanic(err)",
			"}"
		]
	},
	"XML HTTP request": {
		"description": "Basic XML HTTP request with Client",
		"prefix": "xmlHTTPRequest",
		"body": [
			"client := &http.Client{",
			"\tTimeout: time.Second * 60,",
			"}",
			"",
			"var reqBody map[string]string",
			"b := new(bytes.Buffer)",
			"xml.NewEncoder(b).Encode(reqBody)",
			"",
			"req, err := http.NewRequest(${1:method}, ${2:url}, b)",
			"if err != nil {",
			"\tpanic(err)",
			"}",
			"",
			"req.Header.Add(\"key\", \"value\")",
			"",
			"q := req.URL.Query()",
			"q.Add(\"key\", \"value\")",
			"req.URL.RawQuery = q.Encode()",
			"",
			"resp, err := client.Do(req)",
			"if err != nil {",
			"\tpanic(err)",
			"}",
			"defer resp.Body.Close()",
			"",
			"var body map[string]interface{}",
			"if err := xml.NewDecoder(resp.Body).Decode(&body); err != nil {",
			"\tpanic(err)",
			"}"
		]
	},
	"Time formar": {
		"description": "Format time using default format string",
		"prefix": "timeFormat",
		"body": [
			"time.Now().Format(\"Mon Jan 2 15:04:05 MST 2006\")"
		]
	}
}
